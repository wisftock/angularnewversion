# define las etapas de tu pipeline de CI/CD
stages:
  - dependencies
  - test
  - build
  - deploy

# instala las dependencias
install-dependencies:
  stage: dependencies
  # especifica la imagen de Docker que se utilizará para ejecutar los scripts
  image: node:18
  script:
    - npm install
  # especificar que rama ejecutara este stage
  only:
    - master
  # se utiliza para cachear las dependencias de Node.js, lo que acelera los tiempos de construcción posteriores.
  cache:
    # lista los directorios que deben ser cacheados
    paths:
      - node_modules/
    # se utiliza para definir una clave única para el caché , si hay cambios en el .json se ejecuta de nuevo el npm i
    key:
      files:
        - package-lock.json

#ejecutan las pruebas unitarias
test:
  stage: test
  image: node:18
  script:
    - npm install
    - npm run test:ci

# instala las dependencias y compila la aplicación Angular en modo de producción.
build:
  stage: build
  image: node:18
  script:
    - npm i -g @angular/cli
    - ng build
  # archivo o paquete generado durante el proceso de desarrollo de software
  artifacts:
    paths:
      - $CI_PROJECT_DIR/dist/
  # especificar que rama ejecutara este stage
  only:
    - master
  # se utiliza para cachear las dependencias de Node.js, lo que acelera los tiempos de construcción posteriores
  cache:
    # se utiliza para definir una clave única para el caché
    key:
      files:
        - package-lock.json
    # lista los directorios que deben ser cacheados
    paths:
      - node_modules
      - $CI_PROJECT_DIR/dist/
    policy: pull-push
#deploy:
#  stage: deploy
#  script:
#    - echo "Deploy to production..."
#    # Aquí puedes agregar comandos para desplegar tu aplicación Angular
#  only:
#    - master

